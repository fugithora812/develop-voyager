name: Check format & lint AWS deployment
on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
env:
  PRJ_ENV_ID: tengencho-dev
permissions:
  id-token: write
  contents: read
  pull-requests: write
jobs:
  deploy:
    name: AWS deployment
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          verbose: false
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      - name: Cache CDK Dependency
        uses: actions/cache@v3
        id: cache_cdk_dependency_id
        env:
          cache-name: cache-cdk-dependency
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Setup Node.js
        if: ${{ steps.cache_cdk_dependency_id.outputs.cache-hit != 'true' }}
        uses: actions/setup-node@v1
        with:
          node-version: 20.x
      - name: Install dependencies
        if: ${{ steps.cache_cdk_dependency_id.outputs.cache-hit != 'true' }}
        run: npm ci
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Get the latest commit short hash
        id: get_latest_hash
        run: echo "latest_tag=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
      # Dockerイメージを build
      - name: Build and push
        id: docker_build
        env:
          ECR_REPO_URI: ${{ secrets.ECR_REPO_URI }}
        uses: docker/build-push-action@v2
        with:
          push: false
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ env.ECR_REPO_URI }}:${{ steps.get_latest_hash.outputs.latest_tag }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Deploy
        env:
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
          ECR_REPO_URI: ${{ secrets.ECR_REPO_URI }}
        run: |
          echo "AWS_ROLE_ARN=${AWS_ROLE_ARN}" >> .env.local
          make deploy-ci \
            IMAGE_ID=${{ steps.docker_build.outputs.imageid }} \
            LATEST_TAG=${{ steps.get_latest_hash.outputs.latest_tag }} \
            ECR_REPO_URI=${{ env.ECR_REPO_URI }}
          rm .env.local
